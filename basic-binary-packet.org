#+TITLE: Basic Binary Packet
#+AUTHOR: Mark Cox

This library provides a simple API for communicating objects over a
stream. The stream protocol is intended to be very simple and
extensible. An implementation of the protocol is written in Common
Lisp.

[TABLE-OF-CONTENTS]

* Installation
The source code for the basic binary packet library can be obtained
from the github repository.
#+begin_src sh
$ git clone <something>
#+end_src

The list of prerequisite libraries required for this library are
- [[http://common-lisp.net/project/babel/][Babel]]
- [[https://github.com/gigamonkey/monkeylib-binary-data][Binary Data]]
- [[http://weitz.de/flexi-streams/][Flexi-streams]]
- [[http://common-lisp.net/project/ieee-floats/][IEEE Floats]]
- [[https://github.com/OdonataResearchLLC/lisp-unit][Lisp Unit]] (tests only)
These libraries can be obtained using [[http://www.quicklisp.org][Quicklisp]].

An [[http://common-lisp.net/project/asdf/][ASDF]] system definition is provided to load the library in to your
running lisp machine. 
#+begin_src lisp
  (asdf:load-system "basic-binary-packet")
#+end_src

The tests that accompany the library can be executed with
#+begin_src lisp
  (asdf:test-system "basic-binary-packet")
#+end_src
   
* The API
The protocol used for communicating objects in binary form is a packet
based protocol. The packet sent consists of a magic header, a packet
identifier, a payload byte count and the payload. The magic header is
used to accommodate errors in the processing of a payload. 

It is important to note that the packet payload only contains a single
object. This limitation does not preclude sending containers like
lists or arrays that contain many objects.

** Reading and writing packets
A payload can be written to a binary stream using the function
~WRITE-PACKET-FOR-PAYLOAD~
#+begin_src lisp
(defun write-packet-for-payload (stream identifier payload))
#+end_src
The ~IDENTIFIER~ argument is an unsigned 32 bit integer that labels
the packet. The ~PAYLOAD~ argument is an array of 8 bit unsigned
integers.

Reading a packet from a binary stream is performed using the function
~MAKE-PACKET-READER-FUNCTION~. This function returns a function that
can be used to read payloads from a stream. The returned function is a
state machine that must be repeatedly called until a complete packet
is found. The reason for this approach is to accommodate asynchronous
transmissions.
#+begin_src lisp
  (let ((fn (make-packet-reader-function)))
    (defun byte-available-on-stream (stream)
      (multiple-value-bind (payload identifier) (funcall fn stream)
        (when payload
          (payload-received payload identifier)))))
#+end_src
When a packet is found, the state machine resets itself to begin
accumulating the next packet.

** Payload
To describe the encoding of an object we consider how an object is
decoded. The first step in decoding binary data is to read a [[Binary
 Types][BINARY-TYPE]] from the data. A binary type identifies the type of object
that has been encoded and the routine for decoding the object. The
binary representation of the object immediately follows the binary
type data. This two step decoding process is performed by the function
~DECODE-OBJECT~. 
#+begin_src lisp
  (flexi-streams:with-input-from-sequence (in payload)
    (decode-object in))
#+end_src

The encoding of the object is performed by the function
~ENCODE-OBJECT~.
#+begin_src lisp
(defun encode-object (stream object &key binary-type))
#+end_src
This function accepts a ~BINARY-TYPE~ argument to specify which binary
type is to be used to encode ~OBJECT~. If no ~BINARY-TYPE~ argument is
specified, then it is obtained using the generic function
~BINARY-TYPE-FOR-OBJECT~.

** Binary Types
A binary type is a symbol that is used to identify the type of object
encoded in a stream. Associated with the symbol are routines for
reading and writing the binary representation of an object.

A new ~BINARY-TYPE~ can be defined using ~DEFINE-BINARY-TYPE~.
#+begin_src lisp
  (define-binary-type example-type ()
    (:reader (in)
      ;; Read bytes from IN to produce the object
      )
    (:writer (out value)
      ;; Write a binary representation of VALUE to OUT.
      ))
#+end_src
The reader and writer routines for binary types can be invoked using
the functions ~READ-VALUE~ and ~WRITE-VALUE~ . More information on
defining binary types can be obtained from the
~COM.GIGAMONKEYS.BINARY-DATA~ [[http://www.gigamonkeys.com/book/practical-parsing-binary-files.html][documentation]].

A number of built-in binary types are exported by this library. These
types can be found by searching for exported symbols starting with
~BINARY-~. A subset of the types defined are
- ~BINARY-UINT8~ through to ~BINARY-UINT64~.
- ~BINARY-INT8~ through to ~BINARY-INT64~.
- ~BINARY-SINGLE-FLOAT~ and ~BINARY-DOUBLE-FLOAT~.
- ~BINARY-UTF8-STRING~.
- ~BINARY-KEYWORD~.
- ~BINARY-SYMBOL~.
- ~BINARY-CONS~.

There are two special binary types, ~BINARY-TYPE~ and ~BINARY-OBJECT~,
that are exported by this library. The binary type ~BINARY-TYPE~
performs the encoding of the binary type symbol used to identify
objects in the payload. The routines defined for the type
~BINARY-OBJECT~ is synonymous with the routines ~DECODE-OBJECT~ and
~ENCODE-OBJECT~.

Once a binary type and its routines are defined, it can be associated
with object types using the generic function ~BINARY-TYPE-FOR-OBJECT~.
#+begin_src lisp
(defgeneric binary-type-for-object (object)
  (:documentation "Return the symbol of the binary type to use for OBJECT."))
#+end_src
