#+TITLE: Basic Binary IPC and Overlapped I/O
#+AUTHOR: Mark Cox

This document contains information about the module used to implement
the Basic Binary IPC interface on Microsoft Windows.

[TABLE-OF-CONTENTS]

* Introduction
It is clear that the programming interface defined by the Basic Binary
IPC system is heavily inspired by the asynchronous interfaces found on
Unix systems. The asynchronous I/O interfaces on Unix follow the
pattern where the buffers used for reading and writing are only
required to exist whilst ~read(2)~ and ~write(2)~ are on the call
stack. This implies that the calling application must be notified when
the I/O device is ready to perform I/O. This style of asynchronous I/O
would be implemented in pseudo code as follows
#+begin_src lisp
(wait-until-data-available file-descriptor)
(read file-descriptor buffer)
#+end_src

Unfortunately, this style is not employed on the Windows operating
system. The pattern employed on Windows is one where the application
queues a read or write operation and is notified when that operation
has been performed. Obviously, this style of asynchronous programming
requires any arguments passed to the request to exist until the
operation is performed. The Windows style of asynchronous I/O would be
implemented in pseudo code as follows
#+begin_src lisp
  (let ((op (read-file file-descriptor buffer)))
    (wait-until-ready op :indefinite)
    (when (bytes-read-p op)
      (print (elt (buffer op) 0))))
#+end_src

This different approach to the same problem raised questions about how
to implement the ~BASIC-BINARY-IPC~ interface on top of the this style
asynchronous I/O. The ~BASIC-BINARY-IPC.OVERLAPPED-IO~ system is
introduced to begin to bridge the gap between the two styles. This
system provides a direct implementation of the Windows asynchronous
I/O interface without needing to consider the ~BASIC-BINARY-IPC~
interface.

This separation also implies that all terms defined in this document
are confined to this document. 

* Overlapped Operations
Windows uses the term overlapped I/O to define their style of
asynchronous I/O. Overlapped I/O involves passing an [[http://msdn.microsoft.com/en-us/library/windows/desktop/ms684342(v=vs.85).aspx][~OVERLAPPED~]]
structure to a function that performs an action associated with
I/O. The list of I/O functions that are needed to implement IPV4 and
named pipe IPC are as follows

|------------------+--------+--------------------------------------------------|
| Function Name    | Input  | Output                                           |
|------------------+--------+--------------------------------------------------|
| ReadFile         | Buffer | Bytes read and errors.                           |
| WriteFile        | Buffer | Bytes written and errors.                        |
| ConnectNamedPipe | N/A    | N/A                                              |
| AcceptEx         | Buffer | Received data, local address and remote address. |
| WSASend          | Buffer | Bytes written or errors.                         |
| WSARecv          | Buffer | Bytes read or errors.                            |
| ConnectEx        | Buffer | Bytes written.                                   |
|------------------+--------+--------------------------------------------------|

The input column refers to the data that must persist for the duration
of the overlapped I/O. The output column represents the data returned
by the overlapped I/O operation upon completion.

As can be seen, each overlapped I/O operation returns different data,
making it a challenging abstraction.

To make matters worse, the functions in the table above operate two
ways. According to [[http://msdn.microsoft.com/en-us/library/windows/desktop/aa365683(v=vs.85).aspx][Microsoft documentation]] they can
- return ~FALSE~ (meaning failure) with an error status of
  ~ERROR_IO_PENDING~. This states that the application will be
  notified when the operation has been performed.
- return ~TRUE~ to indicate that the operation was
  successful. i.e. the operation was performed immediately.

The next section outlines the design of the ~OVERLAPPED-IO~ system to
remove this confusion.

Details on how an application is notified are omitted from the
section. The sections on [[*Inefficient Polling][inefficient]] and [[*Efficient Polling][efficient]] polling provide
enough details on how to perform this from Lisp applications.

* Design
The interface presented in this section attempts to provide a uniform
style of starting an overlapped I/O operation on any interprocess
communication stream.

The first component of the design is that an application issues a
request to the OS to start an I/O operation. All requests to the
operating system are accompanied with an instance of the ~REQUEST~
class. 

~REQIEST~ objects are used by the application to obtain information
about the status of the requested I/O operation. ~REQUEST~ objects are
essentially wrappers over the ~OVERLAPPED~ structure mentioned in the
previous section. The reason why the word "request" is used instead of
the word "overlapped" is because "request" is a noun and overlapped is
a verb and therefore not suitable as a /name/ of a class.

The second component of the design is the removal of support for
synchronous I/O. This simplifies the presentation and implementation.

The third component is that a single overlapped I/O operation requires
a specific subclass of ~REQUEST~. The reason for this is that all I/O
operations communicate different data. The location of this data is
encapsulated within the specific ~REQUEST~ class.

New ~REQUEST~ objects are automatically created when issuing a request
to perform an operation. Once performed, the ~REQUEST~ object can be
reused when issuing another request, however, it is not possible to
share a single ~REQUEST~ instance across multiple I/O
operations.

Lastly, the function ~FREE-REQUEST~ is used to reclaim operating
system resources captured by each ~REQUEST~ instance.
#+begin_src lisp
(defun free-request (overlapped))
#+end_src

* Inefficient Polling
The last section detailed how to request an I/O operation. This
section details how to receive notification when the operation has
been completed.

The lisp function ~WAIT-FOR-REQUESTS~ is used. This function invokes
the foreign function [[http://msdn.microsoft.com/en-us/library/windows/desktop/ms687025(v=vs.85).aspx][~wait\_for\_multiple\_objects~]].
#+begin_src lisp
(defun wait-for-requests (requests seconds &key wait-all))
#+end_src
If ~WAIT-ALL~ is non ~NIL~ then calling process blocks until all
overlapped objects in ~REQUESTS~ have been performed/triggered.

Any subclass of ~REQUEST~ can be used in the sequence of ~REQUESTS~
argument passed to ~WAIT-FOR-REQUESTS~.

The return value of ~WAIT-FOR-REQUESTS~ is a list of requests which
are have now been performed. The results for the request can now be
retrieved from the ~REQUEST~ object.

The function ~WAIT-FOR-REQUEST~ can be used when only a single request
is to be waited on.
#+begin_src lisp
(defun wait-for-request (request seconds &key wait))
#+end_src

* Efficient Polling
~WAIT-FOR-REQUESTS~ is considered inefficient as the application must
pass a list of overlapped objects to the operating system. The larger
the number of objects, the longer it takes the operating system to
prepare to wait.

To overcome this problem, support for [[http://msdn.microsoft.com/en-us/library/aa365198(VS.85).aspx][I/O Completion Ports]] is
provided. When a file descriptors is created, it is registered with an
I/O completion port. This port can then be used to retrieve an
overlapped object which has been completed. 
